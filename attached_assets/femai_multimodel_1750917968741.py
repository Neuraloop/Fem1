# -*- coding: utf-8 -*-
"""FemAI_ManyModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XfJl7WBZkWw6vOgt1p6gzXmj3JpMDJdp
"""

!pip install -U langchain langgraph langchain_google_genai langchain_openai
import os
from getpass import getpass
os.environ["GOOGLE_API_KEY"]=getpass("Enter your gemini api key:")
#os.environ["OPENAI_API_KEY"]=getpass("Enter you openai api key:")

from typing import TypedDict
class State(TypedDict):
  problem:str
  gemini_response:str
  openai_response:str
  Final_response:str

from langchain_core.prompts import ChatPromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_openai import ChatOpenAI
from langgraph.graph import START,StateGraph,END

def FemSolver(state:State)->State:
  systemprompt=ChatPromptTemplate.from_template("You are an expert Finite Element Analysis (FEA) engineer at the peak of your career, known for solving FEA problems with absolute precision and no errors. Your task is to carefully read and understand the finite element problem described below and solve it step-by-step, ensuring maximum accuracy at each stage.Provide clear reasoning, appropriate formulas, and accurate calculations. Finally, give the exact numerical answer to the question asked.Here is the problem description:{Description}")

  llm1=ChatGoogleGenerativeAI(model="gemini-1.5-flash")
  llm2=ChatGoogleGenerativeAI(model="gemini-2.5-flash")
  #llm2=ChatOpenAI(model="gpt-3.5-turbo")


  chain1=systemprompt|llm1
  chain2=systemprompt|llm2

  init_res1=chain1.invoke({"Description":state["problem"]})
  init_res2=chain2.invoke({"Description":state["problem"]})


  revisionprompt=ChatPromptTemplate.from_template("You are given multiple numerical responses from different LLMs for a problem, where Result 2 is from the best reasoning model and should be given slightly more weight. Analyze all responses: if most values are closely clustered and one or more are significantly different, treat the outliers as noise and exclude them. Only consider values that are numerically close to each other, and compute the average of those. If multiple values are close to Result 2, prioritize them while slightly weighting Result 2 more in the final decision. Provide the most accurate and reasoned final answer based on this analysis. Here are the responses: {result1}, {result2}")
  llm_final_thinker=ChatGoogleGenerativeAI(model="gemini-1.5-flash")
  chain_final_thinker=revisionprompt|llm_final_thinker
  init_combined_response=chain_final_thinker.invoke({"result1":init_res1,"result2":init_res2})

  return({
      "problem":state["problem"],
      "gemini_response":init_res1,
      "openai_response":init_res2,
      "Final_response":init_combined_response.content
  })

workflow=StateGraph(State)
workflow.add_node("FemLLMSolver",FemSolver)
workflow.add_edge(START,"FemLLMSolver")
workflow.add_edge("FemLLMSolver",END)
app=workflow.compile()

query="A 1D bar of length 2 m, cross-sectional area A = 0.01 m², and Young’s modulus E = 200 GPa is fixed at the left end and subjected to an axial force of 1000 N at the right end. Discretize the bar into 2 equal elements, and use linear shape functions. Find the displacement at the free end (right end)."
final_answer=app.invoke({"problem":query})
print("Printing final reponse.........")
print(final_answer["Final_response"])

